// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x7f\x6f\xe2\xb6\xdf\xff\xe7\x55\x7c\x96\xe9\xd1\xae\x12\x10\x7a\xb7\x9d\x56\x0a\x7d\xc4\xd1\xf4\x1a\x3d\x14\xaa\x90\xde\xed\x34\x4d\x95\x49\x0c\xf8\x2e\xb1\x33\xdb\x81\xb2\x8e\xf7\xfe\xc8\x4e\x80\xa4\x84\x96\x56\xb7\x96\xef\x77\x6d\x75\xd7\xc4\xf1\xe7\xf7\x4f\xc7\xce\xed\x2d\x04\x78\x44\x28\x06\xf3\xfa\x1a\x85\x98\xcb\x08\x51\x34\xc6\xdc\x84\xc5\xa2\xad\xee\x2f\xd2\xfb\xdb\x5b\xc0\x34\x80\xc5\xc2\xd8\x0a\x72\xe5\x76\x15\xd4\xed\x2d\xd4\xec\x1b\x89\x39\x45\xe1\x95\xdb\x85\xc5\xc2\xfa\xd1\xd2\xf3\xc4\xff\x72\xec\x63\x32\xc5\xbc\xa5\x26\xb9\xd9\x4d\x0a\x93\x61\x2f\xa2\x17\xc9\xf0\x2b\xf6\xa5\x42\xfb\xbb\x02\x19\x48\x24\x13\x01\x7f\x83\x64\x57\x71\xbc\x04\x25\x23\xc0\x7f\xae\x1e\x9a\x23\xc2\x09\x1d\x2b\x98\x86\x82\xd1\x52\x88\xda\x99\x1e\x85\xbf\x21\xc4\x34\x4f\xf1\x0f\x50\x93\x3e\x72\x96\xc4\x5d\x34\xc4\xa1\xa8\x0d\x18\x97\x38\xb8\x44\x84\x8b\xda\x27\x14\x26\x58\x11\xfc\xca\x08\x05\x13\x14\x56\x48\x49\x8e\x25\xbc\x51\xb8\x6a\x1d\x16\x45\x8c\xa6\xc0\x07\xd9\x58\x0e\xdf\x01\x2c\x16\x6f\x6e\x6f\x61\x46\xe4\xa4\x38\xb9\xe6\xe2\x88\x4d\x71\x91\x7a\x0f\x45\x58\x64\x6a\x2c\xa3\xbe\x62\xfc\x60\x75\xb5\xc5\x36\x01\x16\x3e\x27\xb1\x24\x8c\x9a\xf7\xe8\x58\xe2\x1b\x99\xda\xf1\x3a\x24\x42\x66\x53\x39\xa2\x63\x0c\x35\x58\x2c\x52\xbe\x1a\xc6\x7a\x70\x53\x4f\x4a\x2b\x55\xad\x48\xc5\xbe\xba\x6b\xc1\x4a\x80\x8c\xb1\x94\x78\x9b\x52\x26\x91\xe2\xa9\x80\x32\x37\xfc\x34\xbc\x03\x96\x70\x1f\x37\x52\x63\x62\x8a\x39\x92\x8c\xa7\xee\x67\x94\x28\xaa\xa0\x03\x11\x22\xff\x5b\x2d\xc0\x23\x94\x84\xb2\x26\x89\x0c\x71\xa6\x05\x89\xa3\x38\x44\xb2\xe8\x8b\xb5\x6d\x2a\x2f\xe2\x49\x84\x0a\x81\xa8\x0c\x55\x31\xd0\x76\xc4\x37\x42\x61\x38\x44\xfe\xb7\x0d\x7c\xa5\xec\x2b\xa4\xf0\x37\x3c\x34\x31\x24\xf4\xdb\xce\x1c\xc4\x1c\x2b\x67\x31\x77\x9b\x9d\xc3\x7f\xaf\x02\x74\xda\xd8\x91\x03\xe2\x33\x8a\x23\xf6\x95\xec\xc8\x83\x9a\x9f\xf0\x70\x57\x8e\x77\x17\x6e\xc4\x98\x4c\x93\xe4\x16\x9f\x9a\x90\xd8\x9f\x20\xb9\x06\xe0\x2c\x7a\xba\x27\xdc\xc5\x16\x61\x21\xd0\xf8\x11\x5e\x5a\xe0\x2d\x56\xd4\x82\x44\xce\x57\xf8\x36\x53\xc5\xe3\x3c\x7f\x13\xa3\x1f\x12\x4c\xe5\xd3\x25\xde\x86\x71\x5d\x64\x9e\xe6\x4f\x9b\x78\x09\x15\x12\x51\x1f\x8b\x12\xbc\x1b\xb9\xf1\x1e\xad\xb2\x58\x8c\x31\x25\xf8\xe9\x46\xba\x0f\xd9\xa6\x85\xb2\x52\xb2\x25\x73\x96\xd6\x0e\xe3\x4e\xe5\x2a\x94\xc6\x03\xa8\x43\x75\xb1\x30\xd2\x41\x48\x07\x75\x8e\xbe\x5f\x23\xc5\xfa\xaa\x89\x54\x73\x12\x95\xd0\x73\xb1\x60\xe1\x14\x07\x77\x28\x2e\x87\x77\xa7\xb9\x84\xd8\xa0\x5a\xdd\x45\xa5\x42\x97\x8c\xc7\x7b\x53\xc1\xea\x33\xfc\x94\xc0\x34\x5e\xed\x77\x8f\xfd\xda\x79\xfd\xf3\x70\x03\x5f\xa9\x7d\xf2\x08\xf2\x06\xfa\x13\x85\x88\x47\xaf\x06\xda\x2f\x03\x15\x4c\x34\x25\xbe\x64\x9c\xc5\x62\x1d\x9a\x12\x49\x7c\x5d\xb4\xd5\xab\x39\x1e\x97\xef\x36\xb5\x8a\xa9\x24\x72\x7e\x1d\x10\x11\x87\x68\x7e\xbd\xa5\x39\x7d\xb8\x38\x6d\x62\x8e\x18\x25\x92\x29\x85\x5c\x4b\xc6\xc2\x47\x96\xfd\x3c\x6e\x1c\x21\x12\xae\xfd\x60\xbd\xfe\x7b\x34\x97\x45\x4c\x13\x19\x69\xb6\x8c\xe6\x0f\xa7\xfd\x8e\xf7\xe5\xd2\x06\x35\x04\x97\x57\x1f\xba\x4e\x07\xcc\xaa\x65\x7d\x7e\xd7\xb1\xac\x53\xef\x14\x7e\x3b\xf7\x2e\xba\x70\x58\xab\x83\xc7\x11\x15\x44\x39\x1b\x0a\x2d\xcb\xee\x99\x60\x4e\xa4\x8c\x1b\x96\x35\x9b\xcd\x6a\xb3\x77\x35\xc6\xc7\x96\xe7\x5a\x37\x0a\xd7\xa1\x02\xce\x2e\xab\x32\x07\x59\x0b\x64\x60\x9e\x18\xcd\x1f\xaa\x55\x63\x20\xe7\x21\x06\x44\x03\xd0\x44\x02\xcc\x89\x32\xa8\x6a\x0f\x41\xa1\x16\x0d\xcb\x1a\x13\x39\x49\x86\x35\x9f\x45\x96\x92\x61\x9c\x50\x4b\xa3\x43\x7e\x8a\xaf\xaa\x45\xab\x2e\xd5\x21\x0c\xc3\xf0\x26\x18\x2e\x1c\x0f\xba\xc4\xc7\x54\x60\x78\x73\xe1\x78\x07\x86\xd1\x61\xf1\x9c\x93\xf1\x44\xc2\x1b\xff\x00\xde\xd6\x0f\x7f\x86\x8b\x14\xa3\x61\x5c\x62\x1e\x11\x21\x08\xa3\x40\x04\x4c\x30\xc7\xc3\x39\x8c\x39\xa2\x12\x07\x15\x18\x71\x8c\x81\x8d\xc0\x9f\x20\x3e\xc6\x15\x90\x0c\x10\x9d\x43\x8c\xb9\x60\x14\xd8\x50\x22\x42\x95\xff\x23\xf0\x59\x3c\x37\xd8\x08\xe4\x84\x08\x10\x6c\x24\x67\x88\xa7\x12\x22\x21\x98\x4f\x90\xc4\x01\x04\xcc\x4f\x22\x4c\xd3\xc0\x85\x11\x09\xb1\x80\x37\x72\x82\xc1\x1c\x64\x10\xe6\x81\x26\x12\x60\x14\x1a\x84\x82\x7a\xb6\x7c\xa4\x97\xce\x2c\x91\xc0\xb1\x90\x9c\x68\x2d\x54\x80\x50\x3f\x4c\x02\xc5\xc3\xf2\x71\x48\x22\x92\x51\x50\xe0\x5a\x70\x61\x48\x06\x89\xc0\x15\xcd\x67\x05\x22\x16\x90\x91\xfa\x8b\xb5\x58\x71\x32\x0c\x89\x98\x54\x20\x20\x0a\xf5\x30\x91\xb8\x02\x42\x0d\x6a\x3d\x56\x94\x1c\x16\xe3\x20\x70\x18\x1a\x3e\x8b\x09\x16\xa0\x65\x5d\x73\xa7\xe7\x28\xd6\x63\xa5\x50\x99\xa9\x48\xa8\x91\xd9\x84\x45\x45\x49\x88\x30\x46\x09\xa7\x44\x4c\xb0\x86\x09\x18\x08\xa6\x29\x2a\x6f\x56\x23\x6a\xfa\x88\x85\x21\x9b\x29\xd1\x7c\x46\x03\x92\xad\x96\xb5\x91\xd1\x90\x4d\xb1\x96\x25\xb5\x2b\x65\x92\xf8\xa9\xba\xb5\x01\xe2\xb5\x55\xb3\x47\x62\x82\xc2\x10\x86\x38\x53\x18\x0e\x80\x50\x40\x39\x71\xb8\x22\xaf\x7a\x60\x49\x50\x08\x31\xe3\x9a\xde\x5d\x31\x6b\x86\xe1\x9d\xdb\x30\xe8\x9f\x79\x9f\xdb\xae\x0d\xce\x00\x2e\xdd\xfe\x27\xe7\xd4\x3e\x05\xb3\x3d\x00\x67\x60\x56\xe0\xb3\xe3\x9d\xf7\xaf\x3c\xf8\xdc\x76\xdd\x76\xcf\xfb\x02\xfd\x33\x68\xf7\xbe\xc0\xff\x39\xbd\xd3\x0a\xd8\xbf\x5d\xba\xf6\x60\x00\x7d\xd7\x70\x2e\x2e\xbb\x8e\x7d\x5a\x01\xa7\xd7\xe9\x5e\x9d\x3a\xbd\x8f\xf0\xe1\xca\x83\x5e\xdf\x83\xae\x73\xe1\x78\xf6\x29\x78\x7d\x50\x04\x33\x54\x8e\x3d\x50\xc8\x2e\x6c\xb7\x73\xde\xee\x79\xed\x0f\x4e\xd7\xf1\xbe\x54\x8c\x33\xc7\xeb\x29\x9c\x67\x7d\x17\xda\x70\xd9\x76\x3d\xa7\x73\xd5\x6d\xbb\x70\x79\xe5\x5e\xf6\x07\x36\xb4\x7b\xa7\xd0\xeb\xf7\x9c\xde\x99\xeb\xf4\x3e\xda\x17\x76\xcf\xab\x81\xd3\x83\x5e\x1f\xec\x4f\x76\xcf\x83\xc1\x79\xbb\xdb\x55\xa4\x8c\xf6\x95\x77\xde\x77\x15\x7f\xd0\xe9\x5f\x7e\x71\x9d\x8f\xe7\x1e\x9c\xf7\xbb\xa7\xb6\x3b\x80\x0f\x36\x74\x9d\xf6\x87\xae\x9d\x92\xea\x7d\x81\x4e\xb7\xed\x5c\x54\xe0\xb4\x7d\xd1\xfe\x68\x6b\xa8\xbe\x77\x6e\xbb\x86\x9a\x96\x72\x07\x9f\xcf\x6d\x35\xa4\xe8\xb5\x7b\xd0\xee\x78\x4e\xbf\xa7\xc4\xe8\xf4\x7b\x9e\xdb\xee\x78\x15\xf0\xfa\xae\xb7\x02\xfd\xec\x0c\xec\x0a\xb4\x5d\x67\xa0\x14\x72\xe6\xf6\x2f\x2a\x86\x52\x67\xff\x4c\x4d\x71\x7a\x0a\xae\x67\xa7\x58\x94\xaa\xa1\x60\x91\xbe\xab\xef\xaf\x06\xf6\x0a\x21\x9c\xda\xed\xae\xd3\xfb\x38\x50\xc0\x4a\xc4\xe5\xe4\x9a\x51\xad\x9e\x18\x4d\x9d\x02\x6f\xa2\x90\x8a\x56\x49\x62\x3b\x3c\x3a\x3a\x4a\xf3\x99\xb9\xdb\x24\xa1\x92\x5b\xcb\x1c\x31\x2a\xab\x23\x14\x91\x70\xde\x80\x9f\xce\x71\x38\xc5\x92\xf8\x08\x7a\x38\xc1\x3f\x55\x60\x35\x50\x81\x36\x27\x28\xac\x80\x40\x54\x54\x05\xe6\x64\x74\x0c\x43\x76\x53\x15\xe4\x2f\x55\x8b\x61\xc8\x78\x80\x79\x75\xc8\x6e\x8e\x41\x23\x15\xe4\x2f\xdc\x80\xc3\x9f\xe3\x9b\x63\x88\x10\x1f\x13\xda\x80\xfa\xb1\xca\xad\x13\x8c\x82\x97\xa4\x1f\x61\x89\x40\x55\xd4\x96\x39\x25\x78\xa6\xa2\xc8\x54\xd1\x2b\x31\x95\x2d\x73\x46\x02\x39\x69\x05\x78\x4a\x7c\x5c\xd5\x37\x2f\xa7\x2c\xb0\x96\xec\x2a\x63\x56\xf1\x9f\x09\x99\xb6\xcc\x4e\xca\x6a\xd5\x9b\xc7\x38\xc7\xb8\x6a\x45\x2c\x65\xdc\x63\x5d\x09\x04\x96\xad\x2b\xef\xac\xfa\xeb\x0b\xb3\xaf\xdf\x2d\xbd\x9c\xb9\xef\xeb\x45\x9a\x96\x66\xee\xc4\x30\x9a\x96\x72\x4a\x75\x31\x64\xc1\x1c\x88\xc4\x91\xf0\x59\x8c\x5b\xa6\xa9\x6f\xe4\x5c\x5d\x67\x11\x25\xfc\x09\x8e\x90\x8e\x28\x5b\x55\xf7\x8b\x65\xef\xfb\xac\x42\x56\x67\x78\xf8\x8d\xc8\x6a\xfa\x20\x62\x4c\x4e\x34\x50\x5a\x1b\x08\x12\x38\x58\x4f\x52\xbe\xa1\xa1\xab\x28\xf8\x9a\x08\xd9\x00\xca\x28\x3e\x86\x09\x56\x95\xa9\x01\x87\xf5\xfa\xff\x1c\x43\x48\x28\xae\xae\x86\x6a\xef\x71\x74\x0c\x3a\x02\xd2\x09\xf0\x03\x89\x54\xb0\x20\x2a\x8f\x61\x88\xfc\x6f\x63\xce\x12\x1a\x54\x7d\x16\x32\xde\x80\x1f\x47\xef\xd5\x6f\x5e\xfd\x10\xa3\x20\xd0\x5c\x29\x6f\x18\x8e\xf5\xcc\x96\x99\xcd\x34\x95\xbe\x25\x1a\x3e\xb7\x7b\xe4\x44\xda\x51\x8e\x52\xde\x01\x9a\x92\xbf\x60\x1e\x03\x50\x1c\x3c\x73\x26\x9d\x62\xae\x90\x84\x55\x14\x92\x31\x6d\x80\x64\x71\x51\x51\x53\xfd\xa0\x65\x4a\x16\x9b\x27\x4d\x4b\x06\x6b\x46\xd3\xcc\x6a\xbe\xaf\xd7\x9f\x39\x54\x4a\x99\xce\x96\x56\x0d\x18\x86\xcc\xff\x56\xf0\xed\x08\xdd\x54\x33\x27\x79\x5f\xaf\xc7\x37\x85\x87\x7e\x88\x11\x57\x04\xe5\xa4\x30\xbe\x2d\x50\x56\xca\x01\x94\x48\x76\x27\x24\x0a\xda\xd2\x8a\x02\x68\x06\x64\xfa\xdc\x6e\x55\x94\xf7\xae\x72\xee\x17\x62\xc9\xb7\x32\xb2\x0e\xe6\xcc\xce\x4a\x13\x26\xf8\x38\x0c\xb3\xd9\x2d\xb3\x9e\xde\x8b\x18\xf9\xcb\xfb\x67\x15\x34\x7b\xc8\x51\x40\x12\xd1\x80\x77\x7a\xac\x24\x01\x8c\x46\x85\x2c\x96\x82\x35\xe0\x30\xbe\x01\xc1\x42\x12\xc0\x8f\xf8\x48\xfd\x16\x13\xc3\x68\x94\xd3\xc5\x3e\x64\x87\x35\x27\xcf\x97\x25\xde\x6f\x0d\xb8\x82\x76\x35\xc8\x2c\x2b\x35\xbf\xd4\xeb\xc7\xa0\x4b\x54\x36\xdf\xc7\x54\x62\x5e\x66\x2f\xfd\xaf\xae\x8d\xb2\x69\x37\xfb\xfd\x2f\x6f\xdf\x76\xca\x0b\xd0\x5b\xe5\xd7\x26\x64\xf1\x96\x12\xc8\x5b\x2f\x85\x2d\x8f\xc8\xe5\xcf\x7a\x8b\x7a\xb5\x37\x0d\xfa\x65\x49\xe9\xbb\xa4\x03\x38\x84\xc5\x42\xac\x5e\x78\xc0\x88\x71\x58\x6f\xa3\x6e\xd9\xc6\x86\xc5\xe2\x0e\x55\xc8\x6f\xaa\xb6\x0a\x5b\xaa\x1b\xd3\xb2\x57\x2b\x05\xe3\xaf\x72\xf0\xea\x9e\xbf\xba\xe9\x2e\xc5\x6c\xed\x3c\x87\xa9\xf3\xdc\xe7\x1b\x7b\x9f\xfb\xb6\xaa\x7d\xbf\x9c\x60\xdf\x5d\xa1\x0e\xf5\x65\x2e\xb9\xcf\x1d\x32\x31\x10\x4c\x38\x1e\xb5\xcc\x5d\x5e\xba\x3f\xb3\x3f\x2c\x93\xe6\xd9\xd9\x59\x96\x7c\x03\xec\x33\xae\xdf\xc9\x2d\x97\x07\x85\x05\xc1\x5b\xb5\x1c\x28\xe4\xed\x21\x0b\x83\xf2\xc4\xed\x27\x5c\x28\xec\x31\x23\xe9\xc0\xaa\xa1\x20\x54\x23\xcd\xfa\x8a\x3b\x09\xfe\x17\xc5\x98\xc6\xa7\x5f\xa2\x8e\x18\x8f\x1a\xe0\xa3\x98\x48\x14\x92\xbf\x70\x69\xd2\x7f\xf7\xf3\xaf\x38\x40\x25\xf5\x7a\x63\x46\x36\xac\xb5\xdc\x48\x0b\xf9\x6a\x70\xd5\xbd\xc5\x37\x99\x79\x4f\x3e\x11\x3c\x03\x42\xe1\xc1\xb7\xe3\x4d\x0b\x95\xfa\xf0\x9d\xc4\x5b\x9e\x7e\xd3\x9f\x87\x36\x3f\x4a\x8a\xc2\x6b\xc8\xfe\x33\x21\x2b\x24\x67\x74\xfc\x72\xaa\xfd\x7d\xfb\x41\xb8\x3f\xb2\x9d\xaf\xa6\x95\x32\xf9\x1d\xbc\xae\xa4\x61\xc8\x9e\x2c\x4f\x7b\xdd\xdd\x42\x7b\xf5\xc3\x7f\x87\x1f\xa6\xad\xe9\xca\xd5\x9a\xc3\x97\x33\x33\x58\xe5\x3a\x7a\xe0\x98\xe3\xf6\xb3\x88\x2f\x2c\xcc\xf6\xb8\x83\x92\x5a\xb0\xde\x44\x4f\x2b\xc1\x8b\x7b\x46\x8e\xa3\x7d\x71\x8f\x07\x35\xfa\xe0\xd9\xd5\xff\x50\x67\xc9\x77\x98\x77\x0f\xd3\xbe\x50\x43\xb9\x6c\xb7\x36\x7a\xca\x84\x06\x98\xab\xee\xaf\xe8\x4e\xe9\x71\x60\xd5\x44\xed\x5f\x8e\x79\x5a\x35\xdd\xb1\xbd\xcb\x9f\x35\x29\x35\xef\x6b\x57\xb8\x37\xd5\x78\xef\x3c\x13\xa0\x39\xd9\x43\x9e\xf6\x4e\x4f\x8f\x89\xe0\xfb\x3a\xe2\xd7\xc0\xfa\xef\x6c\x73\xf3\xcb\xad\xd5\x99\xbd\xf5\x82\x6b\x39\xf4\x02\x4b\xae\xfc\x09\xc2\x57\x6f\xfc\x77\x78\xe3\xeb\xa2\xeb\x75\xd1\xf5\xba\xe8\xda\x77\x67\x79\x5d\x74\xed\x4d\xcb\xb6\xcd\x50\x4d\x4b\xef\xc7\x9d\x3c\x62\x2b\x74\x05\xb2\x1e\x79\xf6\x93\x18\x85\xa3\x49\xb9\x93\x26\x6b\x43\x1f\x1d\x1d\xdd\xb7\xc1\x5d\xdc\xd9\xdd\xdc\x92\xdc\x8f\xa6\x61\x9f\xda\x97\xe7\x6c\x5d\xde\x6e\x6d\x5d\x4a\x37\xd1\x1e\x32\x79\xae\xb7\xb9\x73\xae\xa1\x78\x0a\x2b\x9f\xae\x8a\x9f\xfb\x3f\x9f\x43\xbc\xcd\x67\x2b\x2d\xd1\xce\xa9\x0a\x53\x09\xc3\xf9\x6e\xfb\x70\x9b\xb9\x63\xe3\xbc\xc3\xdd\xcc\xd0\xb4\x02\x32\x3d\x49\xff\x37\x8a\x69\x62\xdf\xda\xda\x2d\xc7\xeb\x52\x11\xd7\xf9\xab\x69\x0d\x59\x30\x57\x23\x13\x19\x85\x27\x86\x51\xfe\xfd\x4e\x9c\x88\x09\x9b\x62\xfe\x1d\x3e\xa7\xdf\x40\xf5\xcf\x7f\x0f\xf6\x7d\x3e\x07\xdb\xfd\x6b\xb0\xef\xf7\x31\x58\x8e\xe6\x0e\x9a\x5c\x7f\x13\xff\x88\xef\x5e\xff\x3f\x00\x00\xff\xff\x21\x0c\xe7\xb5\x2c\x44\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 17452, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

