// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x6b\x6f\xdb\xb6\xda\xdf\xf5\x2b\x9e\x69\x78\xb1\x06\xb0\x2c\x27\xdd\x8a\xc5\xb1\x03\xb8\x8e\xd2\x08\xaf\x23\x07\xb6\xd2\xae\x18\x86\x82\x96\x68\x8b\xad\x44\x6a\x24\x95\xc4\xcb\xfc\xdf\x0f\x48\xc9\x17\xd9\x72\xea\x14\x5d\xe2\x73\x96\x04\x6d\x24\x8a\xcf\xfd\x4a\x91\xba\xbf\x87\x10\x8f\x09\xc5\x60\x7e\xfa\x84\x62\xcc\x65\x82\x28\x9a\x60\x6e\xc2\x6c\xd6\x51\xf7\x97\xf9\xfd\xfd\x3d\x60\x1a\xc2\x6c\x66\x6c\x05\xb9\x1e\xf4\x14\xd4\xfd\x3d\xd4\x9d\x3b\x89\x39\x45\xf1\xf5\xa0\x07\xb3\x99\xfd\xa3\xad\xe7\x89\x25\x92\x32\x16\x91\x8d\x3e\xe3\x40\x2a\xe8\xdf\x15\xf8\x50\x22\x99\x09\xf8\x1b\x24\xbb\x4e\x53\xcc\x73\xac\x64\x0c\xf8\xcf\xc5\x43\x73\x4c\x38\xa1\x13\x05\xd3\x54\x30\x9a\x59\x51\x3f\xd7\xa3\xf0\x37\xc4\x98\xe6\x60\x39\xc5\x3f\x40\x4d\x7a\xc7\x59\x96\xf6\xd0\x08\xc7\xa2\x3e\x64\x5c\xe2\xf0\x0a\x11\x2e\xea\xef\x51\x9c\x61\x45\xf0\x33\x23\x14\x4c\x50\x58\x21\x27\x39\x91\xf0\x4a\xe1\xaa\x77\x59\x92\x30\x9a\x03\x1f\x14\x63\x2b\xf8\x0e\x60\x36\x7b\x75\x7f\x0f\xb7\x44\x46\xe5\xc9\xf5\x01\x4e\xd8\x0d\x2e\x53\xf7\x50\x82\x45\xa1\xad\x2a\xea\x0b\xc6\x0f\x16\x57\x5b\x4c\x10\x62\x11\x70\x92\x4a\xc2\x68\x09\x70\x4d\xc7\x12\xdf\xc9\xdc\x5c\x9f\x62\x22\x64\x31\x95\x23\x3a\xc1\x50\x87\xd9\x2c\xe7\xab\x69\x2c\x07\x37\xf5\xa4\xb4\x62\x69\x45\x2a\xf6\xd5\x5d\x1b\x16\x02\x14\x8c\xe5\xc4\x3b\x94\x32\x89\x14\x4f\x25\x94\x2b\xc3\xdf\x86\x77\xc8\x32\x1e\xe0\x66\x6e\x4c\x4c\x31\x47\x92\xf1\xdc\xcb\x8c\x0a\x45\x95\x74\x20\x62\x14\x7c\xa9\x87\x78\x8c\xb2\x58\xd6\x25\x91\x31\x2e\xb4\x20\x71\x92\xc6\x48\x96\x7d\xb1\xbe\x4d\xe5\x65\x3c\x99\x50\x9e\x9e\x54\xa1\x2a\xc7\xd3\x8e\xf8\xc6\x28\x8e\x47\x28\xf8\xb2\x81\xaf\x92\x7d\x85\x14\xfe\x86\xaf\x4d\x8c\x09\xfd\xb2\x33\x07\x29\xc7\xca\x59\xcc\xdd\x66\xaf\xe0\x7f\x50\x01\x3a\x3b\xec\xc8\x01\x09\x18\xc5\x09\xfb\x4c\x76\xe4\x41\xcd\xcf\x78\xbc\x2b\xc7\x1b\xc2\x95\xdc\x24\x22\x69\x10\x21\xb9\x34\x08\x67\xc9\xb7\x1b\x77\x1d\x5b\x82\x85\x40\x93\x47\x38\x5e\x89\xb7\x54\x51\x0b\x33\x39\x5d\xe0\xdb\x8c\xfe\xc7\x39\xf3\x26\xc6\x20\x26\x98\xca\x6f\x97\x78\x1b\xc6\x65\x79\xf8\x36\x17\xd9\xc4\x4b\xa8\x90\x88\x06\x58\x54\xe0\xdd\x48\x77\x0f\x68\x95\xa5\x62\x82\x29\xc1\xdf\x6e\xa4\x87\x90\x6d\x5a\xa8\xa8\x0e\x5b\x92\x61\x65\x39\x30\xd6\x8a\x51\xa9\xda\x1d\x40\x03\xac\xd9\xcc\xc8\x07\x21\x1f\xd4\x69\xf7\x61\x8d\x94\x4b\xa6\x26\x62\xad\x48\x54\x41\x6f\x80\x05\x8b\x6f\x70\xb8\x46\x71\x3e\xbc\x3b\xcd\x39\xc4\x06\x55\x6b\x17\x95\x0a\x5d\x05\x1e\xef\x4d\x25\xab\xdf\x90\x40\x32\xce\x52\xb1\x44\x2b\x91\xc4\x9f\x76\x34\xfe\x7a\xd6\x7d\x8c\x2b\x6f\x92\x4e\x18\x25\x92\x29\x3b\x7c\x92\x8c\xc5\x8f\x8c\xbe\x92\x5c\x38\x41\x24\x5e\xca\xb4\x6c\xad\x1e\xed\xca\x65\x4c\x91\x4c\x34\x5f\x46\xeb\x87\xb3\x7e\xd7\xff\x78\xe5\x80\x1a\x82\xab\xeb\xb7\x3d\xb7\x0b\xa6\x65\xdb\x1f\x5e\x77\x6d\xfb\xcc\x3f\x83\xdf\x2e\xfc\xcb\x1e\x1c\xd6\x1b\xe0\x73\x44\x05\x51\x4e\x8e\x62\xdb\x76\x3c\x13\xcc\x48\xca\xb4\x69\xdb\xb7\xb7\xb7\xf5\xdb\xd7\x75\xc6\x27\xb6\x3f\xb0\xef\x14\xae\x43\x05\x5c\x5c\x5a\x72\x05\xb2\x1e\xca\xd0\x3c\x35\x5a\x3f\x58\x96\x31\x94\xd3\x18\x03\xa2\x21\x68\x22\x21\xe6\x44\x39\x92\x4a\xd3\xa0\x50\x8b\xa6\x6d\x4f\x88\x8c\xb2\x51\x3d\x60\x89\xad\x64\x98\x64\xd4\xd6\xe8\x50\x90\xe3\xb3\xb4\x68\xd6\x5c\x1d\xc2\x30\x0c\x3f\xc2\x70\xe9\xfa\xd0\x23\x01\xa6\x02\xc3\xab\x4b\xd7\x3f\x30\x8c\x2e\x4b\xa7\x9c\x4c\x22\x09\xaf\x82\x03\x38\x6a\x1c\xfe\x0c\x97\x39\x46\xc3\xb8\xc2\x3c\x21\x42\x10\x46\x81\x08\x88\x30\xc7\xa3\x29\x4c\x38\xa2\x12\x87\x35\x18\x73\x8c\x81\x8d\x21\x88\x10\x9f\xe0\x1a\x48\x06\x88\x4e\x21\xc5\x5c\x30\x0a\x6c\x24\x11\xa1\x2a\xee\x10\x04\x2c\x9d\x1a\x6c\x0c\x32\x22\x02\x04\x1b\xcb\x5b\xc4\x73\x09\x91\x10\x2c\x20\x48\xe2\x10\x42\x16\x64\x09\xa6\x79\xc2\x80\x31\x89\xb1\x80\x57\x32\xc2\x60\x0e\x0b\x08\xf3\x40\x13\x09\x31\x8a\x0d\x42\x41\x3d\x9b\x3f\xd2\x5d\x29\xcb\x24\x70\x2c\x24\x27\x5a\x0b\x35\x20\x34\x88\xb3\x50\xf1\x30\x7f\x1c\x93\x84\x14\x14\x14\xb8\x16\x5c\x18\x92\x41\x26\x70\x4d\xf3\x59\x83\x84\x85\x64\xac\xfe\x62\x2d\x56\x9a\x8d\x62\x22\xa2\x1a\x84\x44\xa1\x1e\x65\x12\xd7\x40\xa8\x41\xad\xc7\x9a\x92\xc3\x66\x1c\x04\x8e\x63\x23\x60\x29\xc1\x02\xb4\xac\x4b\xee\xf4\x1c\xc5\x7a\xaa\x14\x2a\x0b\x15\x09\x35\x72\x1b\xb1\xa4\x2c\x09\x11\xc6\x38\xe3\x94\x88\x08\x6b\x98\x90\x81\x60\x9a\xa2\xf2\x66\x35\xa2\xa6\x8f\x59\x1c\xb3\x5b\x25\x5a\xc0\x68\x48\x8a\x46\x54\x1b\x19\x8d\x54\x33\x1e\x2c\xec\x4a\x99\x24\x41\xae\x6e\x6d\x80\x74\x69\xd5\xe2\x91\x88\x50\x1c\xc3\x08\x17\x0a\xc3\x21\x10\x0a\x68\x45\x1c\xae\xc8\xab\x5a\x24\x09\x8a\x21\x65\x5c\xd3\x5b\x17\xb3\x6e\x18\xfe\x85\x03\xc3\xfe\xb9\xff\xa1\x33\x70\xc0\x1d\xc2\xd5\xa0\xff\xde\x3d\x73\xce\xc0\xec\x0c\xc1\x1d\x9a\x35\xf8\xe0\xfa\x17\xfd\x6b\x1f\x3e\x74\x06\x83\x8e\xe7\x7f\x84\xfe\x39\x74\xbc\x8f\xf0\xff\xae\x77\x56\x03\xe7\xb7\xab\x81\x33\x1c\x42\x7f\x60\xb8\x97\x57\x3d\xd7\x39\xab\x81\xeb\x75\x7b\xd7\x67\xae\xf7\x0e\xde\x5e\xfb\xe0\xf5\x7d\xe8\xb9\x97\xae\xef\x9c\x81\xdf\x07\x45\xb0\x40\xe5\x3a\x43\x85\xec\xd2\x19\x74\x2f\x3a\x9e\xdf\x79\xeb\xf6\x5c\xff\x63\xcd\x38\x77\x7d\x4f\xe1\x3c\xef\x0f\xa0\x03\x57\x9d\x81\xef\x76\xaf\x7b\x9d\x01\x5c\x5d\x0f\xae\xfa\x43\x07\x3a\xde\x19\x78\x7d\xcf\xf5\xce\x07\xae\xf7\xce\xb9\x74\x3c\xbf\x0e\xae\x07\x5e\x1f\x9c\xf7\x8e\xe7\xc3\xf0\xa2\xd3\xeb\x29\x52\x46\xe7\xda\xbf\xe8\x0f\x14\x7f\xd0\xed\x5f\x7d\x1c\xb8\xef\x2e\x7c\xb8\xe8\xf7\xce\x9c\xc1\x10\xde\x3a\xd0\x73\x3b\x6f\x7b\x4e\x4e\xca\xfb\x08\xdd\x5e\xc7\xbd\xac\xc1\x59\xe7\xb2\xf3\xce\xd1\x50\x7d\xff\xc2\x19\x18\x6a\x5a\xce\x1d\x7c\xb8\x70\xd4\x90\xa2\xd7\xf1\xa0\xd3\xf5\xdd\xbe\xa7\xc4\xe8\xf6\x3d\x7f\xd0\xe9\xfa\x35\xf0\xfb\x03\x7f\x01\xfa\xc1\x1d\x3a\x35\xe8\x0c\xdc\xa1\x52\xc8\xf9\xa0\x7f\x59\x33\x94\x3a\xfb\xe7\x6a\x8a\xeb\x29\x38\xcf\xc9\xb1\x28\x55\x43\xc9\x22\xfd\x81\xbe\xbf\x1e\x3a\x0b\x84\x70\xe6\x74\x7a\xae\xf7\x6e\xa8\x80\x95\x88\xf3\xc9\x75\xc3\xb2\x4e\x8d\x96\x4e\x81\x77\x49\x4c\x45\xbb\x22\xb1\x1d\x1e\x1f\x1f\xe7\xf9\xcc\xdc\x6d\x92\x50\xc9\xad\x6d\x8e\x19\x95\xd6\x18\x25\x24\x9e\x36\xe1\xa7\x0b\x1c\xdf\x60\x49\x02\x04\x1e\xce\xf0\x4f\x35\x58\x0c\xd4\xa0\xc3\x09\x8a\x6b\x20\x10\x15\x96\xc0\x9c\x8c\x4f\x60\xc4\xee\x2c\x41\xfe\x52\x3d\x00\x8c\x18\x0f\x31\xb7\x46\xec\xee\x04\x34\x52\x41\xfe\xc2\x4d\x38\xfc\x39\xbd\x3b\x81\x04\xf1\x09\xa1\x4d\x68\x9c\xa8\xdc\x1a\x61\x14\x3e\x27\xfd\x04\x4b\x04\x6a\x25\xd5\x36\x6f\x08\xbe\x55\x51\x64\xaa\xe8\x95\x98\xca\xb6\x79\x4b\x42\x19\xb5\x43\x7c\x43\x02\x6c\xe9\x9b\xe7\x53\x16\xd8\x73\x76\x95\x31\x2d\xfc\x67\x46\x6e\xda\x66\x37\x67\xd5\xf2\xa7\x29\x5e\x61\x5c\xb5\x40\xb6\x32\xee\x89\xae\x04\x02\xcb\xf6\xb5\x7f\x6e\xfd\xfa\xcc\xec\xeb\x65\xdb\xf3\x99\xfb\xa1\x5e\xa4\x65\x6b\xe6\x4e\x0d\xa3\x65\x2b\xa7\x54\x17\x23\x16\x4e\x81\x48\x9c\x88\x80\xa5\xb8\x6d\x9a\xfa\x46\x4e\xd5\x75\x11\x51\x22\x88\x70\x82\x74\x44\x39\xaa\xba\x5f\xce\xfb\xb8\x27\x15\xd2\xba\xc5\xa3\x2f\x44\x5a\xf9\x83\x84\x31\x19\x69\xa0\xbc\x36\x10\x24\x70\xb8\x9c\xa4\x7c\x43\x43\x5b\x28\xfc\x9c\x09\xd9\x04\xca\x28\x3e\x81\x08\xab\xca\xd4\x84\xc3\x46\xe3\xff\x4e\x20\x26\x14\x5b\x8b\xa1\xfa\x1b\x9c\x9c\x80\x8e\x80\x7c\x02\xfc\x40\x12\x15\x2c\x88\xca\x13\x18\xa1\xe0\xcb\x84\xb3\x8c\x86\x56\xc0\x62\xc6\x9b\xf0\xe3\xf8\x8d\xfa\x5d\x55\x3f\xa4\x28\x0c\x35\x57\xca\x1b\x46\x13\x3d\xb3\x6d\x16\x33\x4d\xa5\x6f\x89\x46\x4f\xed\x1e\x2b\x22\xed\x28\x47\x25\xef\x00\x2d\xc9\x9f\x31\x8f\x01\x28\x0e\x9e\x38\x93\xde\x60\xae\x90\xc4\x16\x8a\xc9\x84\x36\x41\xb2\xb4\xac\xa8\x1b\xfd\xa0\x6d\x4a\x96\x9a\xa7\x2d\x5b\x86\x4b\x46\xf3\xcc\x6a\xbe\x69\x34\x9e\x38\x54\x2a\x99\x0e\x89\x48\x63\x34\x6d\xc2\x28\x66\xc1\x97\x92\x6f\x27\xe8\xce\x2a\x9c\xe4\x4d\xa3\x91\xde\x95\x1e\x06\x31\x46\x5c\x11\x94\x51\x69\x7c\x5b\xa0\x2c\x94\x03\x28\x93\x6c\x2d\x24\x4a\xda\xd2\x8a\x02\x68\x85\xe4\xe6\xa9\xdd\xaa\x2c\xef\xba\x72\x1e\x16\x62\xce\xb7\x32\xb2\x0e\xe6\xc2\xce\x4a\x13\x26\x04\x38\x8e\x8b\xd9\x6d\xb3\x91\xdf\x8b\x14\x05\xf3\xfb\x27\x15\xb4\x78\xc8\x51\x48\x32\xd1\x84\xd7\x7a\xac\x22\x01\x8c\xc7\xa5\x2c\x96\x83\x35\xe1\x30\xbd\x03\xc1\x62\x12\xc2\x8f\xf8\x58\xfd\x96\x13\xc3\x78\xbc\xa2\x8b\x7d\xc8\x0e\x4b\x4e\x9e\x2e\x4b\xbc\xd9\x1a\x70\x25\xed\x6a\x90\xdb\xa2\xd4\xfc\xd2\x68\x9c\x80\x2e\x51\xc5\xfc\x00\x53\x89\x79\x95\xbd\xf4\xbf\x86\x36\xca\xa6\xdd\x9c\x37\xbf\x1c\x1d\x75\xab\x0b\xd0\x91\xf2\x6b\x13\x8a\x78\xcb\x09\xac\x5a\x2f\x87\xad\x8e\xc8\xf9\xcf\x72\xf7\x67\xb1\xed\x03\xfa\x6d\x49\xe5\x3b\xac\x03\x38\x84\xd9\x6c\xb9\x15\x05\x63\xc6\x61\xb9\x43\xb1\x65\x87\x08\x66\xb3\x35\xaa\xb0\xba\x5f\xd1\x2e\xed\x56\x6c\x4c\x2b\x5e\xad\x94\x8c\xbf\xc8\xc1\x8b\x7b\xfe\xe2\xa6\xbb\x14\xb3\xa5\xf3\x1c\xe6\xce\xf3\x90\x6f\xec\x7d\xee\xdb\xaa\xf6\xfd\x72\x82\x7d\x77\x85\x06\x34\xe6\xb9\xe4\x21\x77\x28\xc4\x40\x10\x71\x3c\x6e\x9b\xbb\xbc\xc0\x7d\x62\x7f\x98\x27\xcd\xf3\xf3\xf3\x22\xf9\x86\x38\x60\x5c\xbf\x93\x9b\x2f\x0f\x4a\x0b\x82\x23\xb5\x1c\x28\xe5\xed\x11\x8b\xc3\xea\xc4\x1d\x64\x5c\x28\xec\x29\x23\xf9\xc0\xa2\xa1\x20\x54\x23\x2d\xfa\x8a\xb5\x04\xff\x8b\x62\x4c\xe3\xd3\x2f\x51\xc7\x8c\x27\x4d\x08\x50\x4a\x24\x8a\xc9\x5f\xb8\x32\xe9\xbf\xfe\xf9\x57\x1c\xa2\x8a\x7a\xbd\x31\xa3\x18\xd6\x5a\x6e\xe6\x85\x7c\x31\xb8\xe8\xde\xd2\xbb\xc2\xbc\xa7\xef\x09\xbe\x05\x42\x1f\x7a\xf9\x3e\x5f\x46\xa2\x4a\x1f\x5e\x4b\xbc\xd5\xe9\x37\xff\xf9\xda\xa6\x4b\x45\x51\x78\x09\xd9\x7f\x26\x64\x85\xe4\x8c\x4e\x9e\x4f\xb5\xbf\x6f\x3f\x63\xf2\x47\xb1\xe3\xd6\xb2\x73\x26\xbf\x83\xd7\x55\x34\x0c\xc5\x93\xf9\x41\x8a\xf5\xad\xbb\x17\x3f\xfc\x77\xf8\x61\xde\x9a\x2e\x5c\xad\x35\x7a\x3e\x33\x83\x5d\xad\xa3\xaf\x9c\x20\xda\x7e\xcc\xe7\x99\x85\xd9\x1e\x77\x50\x51\x0b\x96\x9b\xf7\x79\x25\x78\x76\xcf\x58\xe1\x68\x5f\xdc\xe3\xab\x1a\xfd\xea\xb1\xb0\xff\x52\x67\x59\xed\x30\xd7\xcf\xa9\x3d\x53\x43\x39\x6f\xb7\x36\x7a\xca\x8c\x86\x98\xab\xee\xaf\xec\x4e\xf9\x49\x3b\xd5\x44\xed\x5f\x8e\xf9\xb6\x6a\xba\x63\x7b\xb7\x7a\xc6\xa5\xd2\xbc\x2f\x5d\xe1\xde\x54\xe3\xbd\xf3\x4c\x80\x56\xb4\x87\x3c\xed\x9d\x9e\x1e\x13\xc1\x0f\x75\xc4\x2f\x81\xf5\xbf\xd9\xe6\xae\x2e\xb7\x16\x67\x05\x97\x0b\xae\xf9\xd0\x33\x2c\xb9\x56\x4f\x2e\xbe\x78\xe3\xbf\xc3\x1b\x5f\x16\x5d\x2f\x8b\xae\x97\x45\xd7\xbe\x3b\xcb\xcb\xa2\x6b\x6f\x5a\xb6\x6d\x86\x6a\xd9\x7a\x3f\xee\xf4\x11\x5b\xa1\x0b\x90\xe5\xc8\x93\x9f\xc4\x28\x1d\x4d\x5a\x39\x69\xb2\x34\xf4\xf1\xf1\xf1\x43\x1b\xdc\xe5\x9d\xdd\xcd\x2d\xc9\xfd\x68\x1a\xf6\xa9\x7d\x79\xca\xd6\xe5\x68\x6b\xeb\x52\xb9\x89\xf6\x35\x93\xaf\xf4\x36\x6b\xe7\x1a\xca\xa7\xb0\x56\xd3\x55\xf9\x83\xd9\xa7\x73\x88\xa3\xd5\x6c\xa5\x25\xda\x39\x55\x61\x2a\x61\x34\xdd\x6d\x1f\x6e\x33\x77\x6c\x9c\x77\x58\xcf\x0c\x2d\x3b\x24\x37\xa7\xf9\xff\x46\x39\x4d\xec\x5b\x5b\xbb\xe5\x78\x5d\x2e\xe2\x32\x7f\xb5\xec\x11\x0b\xa7\x6a\x24\x92\x49\x7c\x6a\x18\xd5\x9f\xea\xa6\x99\x88\xd8\x0d\xe6\xdf\xe1\x4b\xd5\x0d\x54\xe5\x6f\x9b\xfe\x89\xef\xd0\xbe\xcf\x67\x68\xbb\x7f\x85\xf6\xfd\x3e\x42\x5b\xa1\xb9\x83\x26\x97\x9f\x9b\x3e\xe2\x13\xb0\xff\x04\x00\x00\xff\xff\x9f\xc4\x46\xd1\x6e\x3f\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16238, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

